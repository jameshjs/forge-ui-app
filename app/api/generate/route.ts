import { NextRequest, NextResponse } from "next/server"
import Replicate from "replicate"

type GenerateRequest = {
  prompt: string
  width: number
  height: number
  cfgScale?: number
  count?: number
  negativePrompt?: string
  samplerName?: string
  steps?: number
}

export async function POST(request: NextRequest) {
  try {
    const body = (await request.json()) as GenerateRequest

    const apiToken = process.env.REPLICATE_API_TOKEN
    if (!apiToken) {
      return NextResponse.json(
        { error: "Missing REPLICATE_API_TOKEN env var" },
        { status: 500 },
      )
    }

    const prompt = body.prompt?.trim() || ""
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 })
    }

    const replicate = new Replicate({
      auth: apiToken,
    })

    const count = Math.max(1, Math.min(4, Number(body.count ?? 1))) // Replicate supports up to 4 images
    const width = Number(body.width) || 1024
    const height = Number(body.height) || 1024
    const steps = Number(body.steps ?? 20)
    const cfgScale = Number(body.cfgScale ?? 7.5)

    // Build enhanced prompt with negative prompt if provided
    let enhancedPrompt = prompt
    if (body.negativePrompt?.trim()) {
      enhancedPrompt = `${prompt}, avoid: ${body.negativePrompt}`
    }

    // Add style and quality modifiers
    enhancedPrompt += ", high quality, detailed, professional artwork"

    const images: string[] = []

    // Generate multiple images if requested
    for (let i = 0; i < count; i++) {
      try {
        const output = await replicate.run(
          "black-forest-labs/flux-dev",
          {
            input: {
              prompt: enhancedPrompt,
              width: Math.min(width, 1024),
              height: Math.min(height, 1024),
              num_inference_steps: Math.min(steps, 50),
              guidance_scale: cfgScale,
              output_format: "webp",
            }
          }
        ) as string[]

        if (output && output.length > 0) {
          // Convert Replicate URLs to base64 data URLs
          for (const imageUrl of output) {
            try {
              const imageResponse = await fetch(imageUrl)
              if (imageResponse.ok) {
                const imageBuffer = await imageResponse.arrayBuffer()
                const base64 = Buffer.from(imageBuffer).toString('base64')
                images.push(`data:image/png;base64,${base64}`)
              } else {
                // If we can't fetch the image, use the URL directly
                images.push(imageUrl)
              }
            } catch (fetchErr) {
              // If we can't convert to base64, use the URL directly
              images.push(imageUrl)
            }
          }
        } else {
          return NextResponse.json(
            { error: "No image generated by Replicate" },
            { status: 502 },
          )
        }
      } catch (err) {
        const message = err instanceof Error ? err.message : String(err)
        return NextResponse.json(
          { error: "Replicate generation failed", message },
          { status: 502 },
        )
      }
    }

    return NextResponse.json({ images })
  } catch (err) {
    const message = err instanceof Error ? err.message : "Unknown error"
    return NextResponse.json(
      { error: "Failed to generate images", message },
      { status: 500 },
    )
  }
}


